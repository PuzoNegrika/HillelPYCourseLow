print("Hello Arthur!")

year_of_independence = 1991
# a3 = 3 - Валідна змінна
# 3a = 3 - Не валдіна змінна. Буде помилка
# _some_variable = 1 # Валідний код, правильне іменування
# myVariable = 2 # Невалідний код
# $some_variable = 1 # Невалідний код (не можна ставити різні позначки у назві)
# моя_прекрасна_змінна = 1 # Невалідний код, кирилиця
# Імʼя може складатися з маленьких або великих літер, цифр та знаку нижнього підкреслення. Інші знаки пунктуації заборонені. Хоча актуальна версія Python підтримує букви будь-якого алфавіту, і навіть emoji, але завжди використовуйте лише букви англійського алфавіту.
# def = 1 # Невалідний код, оскільки def – це ключове слово
# definition = 1 # Валідний код
# Існує 4 розповсюджених стилі іменування змінних: snake_case, camelCase, PascalCase, kebab-case. У Python прийнято використовувати snake_case. Дуже легко запамʼятати, бо пітон – то змія, тобто і зміїна нотація.

# Типи Данних
# У Python типи даних бувають змінюванні(mutable) та незмінні(immutable). Значення змінюваних типів даних можуть бути модифіковані без створення нового обʼєкту у памʼяті, тобто їх адреса залишається такою самою. У випадку з незмінними типами даних можливо лише створити новий обʼєкт з модифікованим значенням

x = 1
print(id(x)) # Виведе 140708069001656. Для кожного запуску кода це значення – різне
x = 2 # Перевизначення, тобто змінна змінила адресу у памʼяті
print(id(x)) # Виведе 140708069001688, тобто іншу клітину памʼяті

# Для визначення типу змінної у Python можна використати функцію type.
x = 1
print(type(x)) # <class 'int'>

l = [1, 2, 3] # Це змінний тип данних list, який є змінюванним
print(l) # Виведе [1, 2, 3]
print(id(l)) # Виведе 4377070080. Для кожного запуску кода це значення – різне. Ці номера - показують нам де в пам'яті розташованний цей елемент.
l.append(4) # Додаємо елемент 4 в кінець списку
print(l) # Виведе [1, 2, 3, 4]
print(id(l)) # Виведе 4377070080. Таке ж саме значення

# Система Числення
# Це правила запису числа за допомогою цифр, або інших символів. Системи числення бувають позиційні, та непозиційні. Позиційні – це такі, в яких місце де розташовано символ вливає на значення, а непозиційні – це де не впливає. Чудовим прикладом непозиційної системи числення є – римська, де в не залежності від місця I – означає 1.
# Оскільки компʼютери не мали такої довгої історії, як люди, та й взагалі не мають пальців, то систему числення для них обрали раціонально, виходячи з фізичної будови. Для кодування даних у ЕОМ використовується двійкова система числення, оскільки кожен транзистор процесору чи памʼяті може бути в одному з двох станів “відкритий” або “закритий”.
# У двійковій системі числення використовується лише два знаки – 0 та 1. Тобто будь-яке число буде вигляди як набір одиниць та нулів.
# Наприклад: 10(один, нуль) у двійковій системі дорівнює 2(два) у десятковій. Для того, щоб перевести число з двійкової системи числення у десяткову необхідно зліва-направо взяти кожний знак та помножити на 2 у ступені позиції мінус один.
# Наприклад:
# 101 = 1*2^2 + 0 * 2^1 + 1 * 2^0 = 4 + 0 + 1 = 5

# Цілі Числа
# Зазвичай, цілі числа зберігаються у 4 або 8 байтах, тобто використовують 32 або 64 одиниць та нулів.
# Щоб створити змінну типу int необхідно просто присвоїти змінній число.
# Наприклад:
# x = 1
# print(x) # 1
# print(type(x)) # <class 'int'>
# У цілих чисел у Python є особливість. Вони можуть приймати майже нескінченно великі значення, але після порогу розміру будуть використовуватися інші алгоритми для роботи з ними, що значно сповільнить виконання програми.

# Раціональні Числа
# Раціональні числа, або числа з плаваючою точкою – це числа що не є цілими, але мають кінцеве точне значення. Оскільки компʼютерні системи – дискретні, то вони можуть оперувати лише раціональними числа, а не всією множиною дійсних чисел. Наприклад: число Pi – це дійсне неперіодичне нескінченне число, але у програмуванні ми завжди використовуємо його як раціональне число з якою точністю, тобто беремо стільки знаків після точки, скільки необхідно для даної задачі.
# У Python раціональні числа репрезентує тип float. Числа такого типа зберігаються у 8 байтах та мають можуть приймати значення приблизно від $-2.2 * 10^{-308}$ до $1.8 * 10^308$.
# Наприклад:
# f = 0.1
# print(type(f)) # Виведе <class 'float'>
# print(f) # Виведе 0.1
# Оскільки раціональні числа у памʼяті зберігаються як апроксимація реального значення, то потрібно бути дуже обережними з математичними операціями з ними.
# Наприклад:
print(0.1 + 0.1 + 0.1) # Виведе 0.30000000000000004, бо реальне значення. Це хвости з плаваючою точкою
# у пам'яті – це не 0.1,
# а 0.1000000000000000055511151231257827021181583404541015625
# ВАЖЛИВО! Ніколи не використовуйте тип даних float для обчислень, що мають критичне значення у точності. Наприклад: грошові операції, параметри медичного устаткування, параметри запуску ракети. Але завжди використовуйте його для обчислень, що не мають такої критичності для прискорення виконання обчислень, наприклад: компʼютерна графіка, цивільна навігація, будівництво.

# Арифметичні Операції
# У Python можна додавати будь-які числа. Хоча мова і суворо типізована, але у випадку з математичними операціями дає деяку свободу. Можна додавати числа типу int та int, float та float, а також int та float. Будьте уважні, бо при додавані різних типів чисел ваш результат буде конвертовано у тип float.
x = 1 + 4 + 0.2
print(x) # 5.2
print(type(x)) # <class 'float'>
# Коли ви додаєте тип данних: int + float, то завжди буде float.

x = 7 // 2
print(x) # 3 з округленням
x = 7 / 2
print(x) # 3.5 без округлення
# Залишок від ділення націло %
# Ця операція також називається – ділення по модулю. Вона повертає залишок від числа, після ділення націло
x = 13 % 3
y = -13 % 3
print(x) # 1
print(y) # Виведе 2, бо -13 // 3 = -5 (бо 3 * 5 = 15, наближенно), -5 * 3 = -15, -13 - (-15) = 2
print(type(x)) # <class 'int'>

#Функція divmod
# Ця функція поєднує у собі відразу 2 оператори // та %, та повертає одразу 2 числа. Дуже корисним у цьому випадку є те, що Python дозволяє одразу ініціалізувати більше ніж одну змінну. Це називається parallel assignment.
print(divmod(11, 2)) # Виведе (5, 1)
div, mod = divmod(11, 2)
print(div) # Виведе 5, тобто результат 11 // 2
print(mod) # Виведе 1, тобто результат 11 % 2
# Повертає два значення: (x//y, x%y)

# Модуль Math
# Одним з основних принципів Python є – batteries included, тобто батарейки йдуть у комплекті. Це означає, що Python у своїй базовій комплектації містить майже усе, що вам може бути потрібно. Однією з таких речей – є модуль math, що містить у собі великий спектр математичних операцій.
# Для того, щоб використати будь-який модуль, не важливо чи він стандартний, чи додатковий необхідно використати ключове слово import.
import math # Дає знати інтерпритатору, що цей файл може використовувати цей модуль (його треба писати на початку(бажано))
print(math.sqrt(9))
# math - вбудованний модуль. Його просто потрібно імпортувати в самому коді (без консолі).
# .ceil - заокруглення до вищого

# Введення Даних з клавіатури
# Для введення даних з клавіатури, у консольних програмах Python використовується функція input(). При виклику цієї функції виконання програми зупиняється та очікується введення даних від користувача. Ця функція завжди повертає тип даних – рядок, тому якщо необхідно ввести число, то треба змінити тип явно
user_input = input() # Нехай користувач надрукував 4
print(type(user_input)) # <class 'str'>
number = float(user_input) # Сприймає тільки число, бо int працює тільки з числами
print(number / 2) # Виведе результат поділенний на 2