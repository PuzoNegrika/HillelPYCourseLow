# Оператори в Python
# x == y	Рівні (порівняння значень)
# x != y	Не рівні ()
# x > y	    більше ()
# x < y	    менше ()
# x >= y	більше чи рівні ()
# x <= y	менше чи рівні ()

# True і False в Пайтон - це спеціальні значення, які належать до логічного типу даних Boolean. Вони використовуються для представлення істинності або хибності якогось виразу, умови або факту
# True і False можуть брати участь у логічних операціях, таких як and, or, not, які повертають нове логічне значення в залежності від правил булевої алгебри. True і False також можуть використовуватися в операторах розгалуження, таких як if, elif, else, для виконання різних дій залежно від результату перевірки умови.
# Функція bool в Пайтон - це вбудована функція, яка повертає логічне значення, тобто одне з True або False
# Функція bool також є класом, який є підкласом цілого типу int. Об'єкти bool наслідують всі методи та операції від int, але можуть приймати тільки два значення: 0 (False) або 1 (True).
# None в Пайтон - це спеціальне значення, яке означає відсутність або невизначеність. None може бути присвоєно змінній, повернуто функцією, або використано в якості аргументу. None також є єдиним екземпляром класу NoneType, який належить до логічного типу даних. None може бути перевірено на рівність з допомогою оператора is або функції bool. None вважається хибним значенням в булевому контексті.
print(bool(0)) # False
print(bool(1)) # True
print(bool(None)) # False
print()

# Оператор if
# оператор if в Пайтон - це конструкція, яка дозволяє виконувати різні дії в залежності від результату перевірки деякої умови. Умова - це логічний вираз, який може бути істинним (True) або хибним (False).
orange_price = 37.5
my_money = 20

if my_money > orange_price:
	# Цей набір команд буде виконано лише в тому випадку,
	# коли my_money буде більшим, ніж orange_price
    x = 13
    my_money -= orange_price
    print("I buy orange")
    print(my_money)
else:
    # Якщо результат False - переходимо до els
    print("I dont have enough money to by orange")


if my_money:
    # Вона вже = True
    x = 10
    print("I bought some oranges")
    print(my_money)

print(x)
print("The end")
print()
# Важливість чотирьох пробілів у Python полягає в тому, що вони використовуються для відступів, які визначають структуру блоків коду. Відступи є обов'язковими в Python, оскільки вони допомагають інтерпретатору розрізняти, які рядки коду належать до якого блоку. Блоки коду - це групи рядків, які виконуються разом, наприклад, в умовних операторах, циклах, функціях або класах. Якщо відступи не дотримуються, код може викликати синтаксичну помилку або працювати не так, як очікується.
# Якщо виникає необхідність виконати один блок операторів, коли умова істинна, та інший блок операторів коли воно хибне, можна блок з оператором if, доповнити блоком else.

# Використання вкладених операторів if
orange_price = 17.5
my_money = 20
tea_price = 14

if my_money > orange_price:
    print("I buy orange")
else:
		# Вкладений умовний оператор if зі своїм блоком else
    if my_money > tea_price:
        print("Not orange, just tea")
        if tea_price:
            print("I but tea")
        else:
            print("I buy coffee")
    else:
        print("I buy apple")

print("The end")
print()

# Оператор множинного вибору
# Іноді потрібно вибрати одну умову із запропонованої безлічі умов. У такому разі можна використовувати оператор множинного вибору, який у Python реалізований за допомогою операторів if..elif..else
orange_price = 15.5
my_money = 0
tea_price = 12

if my_money > orange_price:
    print("I buy orange")
elif my_money > tea_price:
    print ("Not orange, just tea")
else:
    print("I buy apple")

print()

# Використання булевих операторів у Python
# Булеві оператори Python використовуються для об'єднання кількох логічних умов. У Python існують такі булеві оператори:
# and — Умовний оператор І. Поверне True тільки у випадку, якщо обидві умови повернуть True. В інших випадках поверне False
# or - Умовний оператор АБО. Поверне False тільки у випадку, якщо обидві умови повернуть False. В інших випадках поверне True
# not — Умовний оператор НЕ. Інвертує результат умовного оператора
# Використання оператора and
# Логічне_умова / Результат умов / Результат умов / Результат умов / Результат умов
# Логічна_умова_1	TRUE	FALSE	FALSE	TRUE
# Логічна_умова_2	FALSE	TRUE	FALSE	TRUE
# Результат	FALSE	FALSE	FALSE	TRUE    TRUE

if my_money > orange_price and my_money > tea_price and my_money > 0:
    print("I buy orange")
elif my_money > tea_price:
    print ("Not orange, just tea")
else:
    print("I buy apple")
print('OK')

# Булевий оператор or використовується для об'єднання логічних умов Результат об'єднання поверне False, якщо обидві логічні умови повернуть False. В інших випадках результатом буде True
# Різниця між and / or: якщо у if 5 перевірок з'єднані з and, і якщо буде хоча б 1 False - то воно пропускає усе інше окрім False
# Or - шукає True. And - шукає False
number_a = 17
number_b = 21

if number_b > 20 or number_a > 20:
    if number_a > 20:
        print('>20')
    print("Yes")
else:
    print("No")

print()

# Булевий оператор not використовується для інвертування логічних умов. Тобто якщо в нас True, то при використанні not - в нас змінується значення на протилежне
number_a = 17

if not number_a > 20:
    print("Yes")
else:
    print("No")

print()

# Тернарний оператор
# Тернарний оператор в Пайтон - це спосіб запису виразу, який має два можливі результати в залежності від деякої умови. Тернарний оператор складається з трьох частин: умови, значення, яке повертається, якщо умова істинна, і значення, яке повертається, якщо умова хибна. Тернарний оператор дозволяє писати короткі і зрозумілі вирази, які замінюють більш громіздкі конструкції if-else.
# Загальний синтаксис тернарного оператора в Пайтон такий:
# <значення_якщо_істинно> if <умова> else<значення_якщо_хибно>
x = 10
y = 20
z = x if x > y else y # z буде рівне 20, оскільки умова x > y хибна

number_b = 15

number_a = 10 if number_b < 5 else 20
print(number_a) # 10
print()

# Список в Пайтон
# Список в Пайтон - це тип даних, який дозволяє зберігати кілька елементів в одній змінній. Список може містити елементи різних типів, таких як числа, рядки, булеві значення, інші списки тощо. Список є впорядкованою колекцією, тобто елементи списку мають певну позицію або індекс, за яким можна до них звертатися
# Список також є змінюваним, тобто елементи списку можна додавати, видаляти, замінювати або переміщувати.
# Списки в Пайтон - це дуже потужний та гнучкий тип даних, який дозволяє зберігати та обробляти різноманітні дані в одній змінній
# Список створюється за допомогою квадратних дужок [] або функції list()
# Як створити порожній список у Python
example = [12, 542, "someText", {}, True, False, None, 14.2, [434, 23, 21]] # [...,[...]] - додаткові [] рахуються як 1 елемент

print(example)
print(example[1]) # 542, в програмуванні індексі починаються з 0
print(example[-1]) # -1 - останній елемент в списку
print(example[-3]) # None
print(example[-1][1]) # 23, звертання во вкладенний список

example_list = list("Hello World")
print(example_list)
print()
# Елемент списку в Пайтон - це один з об'єктів, які зберігаються в списку. Елементи списку можуть бути різних типів, таких як числа, рядки, булеві значення, інші списки тощо
# Елементи списку мають певну позицію або індекс, за яким можна до них звертатися. Індекси списку починаються з нуля і збільшуються на одиницю для кожного наступного елемента. Елементи списку можна додавати, видаляти, замінювати, сортувати, перевертати та виконувати інші операції над ними
# ВАЖЛИВО! Фізично, дані, які ми додаємо до списку, у ньому не знаходяться! У кожному елементі списку зберігається посилання на певну область пам'яті, де зберігаються ті дані, які ми додавали як значення елементів списку!

# Доступ до елементів списку
# Доступ до елементів списку в Пайтон здійснюється за допомогою індексів, які вказують позицію елемента в списку. Індекси починаються з нуля для першого елемента і збільшуються на одиницю для кожного наступного
lst2 = list('Hello world')
print(lst2[0]) # H
print(lst2[2]) # l

# Список, який містить інші списки (список списків). Вкладена структура
lst_lst = [
    [9, 12, 3], # <- 0
    [4, 5, 46],  # <- 1
    [4, 23, 12]   # <- 2
                ]

print(lst_lst[0]) # Перший "рядок" [9, 12, 3]
print(lst_lst[1]) # Другий "рядок" [4, 5, 46]
print()
print(lst_lst[1][2]) # Останній елемент другого рядка 46
# Окрім прямих індексів, в Пайтон можна використовувати від'ємні індекси, які вказують позицію елемента від кінця списку
# Від'ємні індекси починаються з -1 для останнього елемента і зменшуються на одиницю для кожного попереднього. Щоб отримати елемент списку за від'ємним індексом, також потрібно вказати ім'я списку і індекс елемента в квадратних дужках

#Додати елемент до списку
# Для того, щоб додати елемент до кінця списку, потрібно написати ім'я списку, після цього поставити крапку та написати append(). У дужках вказати те, що потрібно додати до кінця списку
# append() Метод додає елемент в кінець списку
print(example[-1])
example.append("Oleksii")
example.append(123123123)
print(example[-1])
print(example)
print()

# Не можна додати до списку елемент за індексом, якого в цьому списку немає!
example[3] = 1  # IndexError
#insert() Метод дозволяє вставляти об'єкт у список за індексом.
first_list = [2, 4, 7, 11, 0, -2, 8]
first_list.insert(5,40) # 1 аргумент - індекс, 2 - елемент. Елемент вставляється ПІСЛЯ числа (...11, 0 (5 елемент) - і ось після 0 буде 40)
print(first_list)  # [2, 4, 7, 11, 0, 40, -2, 8]

# Якщо такого індексу у списку немає, елемент буде додано по першому доступному індексу з правого боку списку
empty_lst = []
empty_lst.insert(2, 5)
print(empty_lst) # [5]
empty_lst.insert(2, 66)
print(empty_lst) # [5, 66]
empty_lst.insert(1, 7)
print(empty_lst) # [5, 7, 66]
print()

# Видалити елемент зі списку
# Щоб видалити елемент зі списку в Пайтон, ви можете використовувати один з наступних способів:
# 1.Використовувати вбудовану функцію remove(), яка приймає значення елемента, який потрібно видалити, і видаляє його зі списку. Наприклад, якщо ви хочете видалити елемент зі значенням 1 зі списку lst, ви можете написати:
first_list = [3, 1, 4, 1, 5, 9, 2, 6, 5]
print(first_list)
first_list.remove(1) # видаляє перше входження 1 зі списку
print(first_list) # [3, 4, 1, 5, 9, 2, 6, 5]
first_list.remove(1) # в нас залишилась ще одна 1, тому дублюємо це і видаляємо останню одиницю
print(first_list) # [3, 4, 5, 9, 2, 6, 5]
print()

# 1.1. Якщо такого елементу немає, то буде помилка ValueError
# first_list.remove(11)  # ValueError

# 2. Використовувати вбудовану функцію pop(), яка приймає індекс елемента, який потрібно видалити, і повертає його значення, а також видаляє його зі списку. Наприклад, якщо ви хочете видалити елемент з індексом 2 зі списку lst, ви можете написати:
first_list = [3, 1, 4, 1, 5, 9, 2, 6, 5]
x = first_list.pop(2) # бере 2 індекс(4), і повертає значення 4, потім видаляє його зі списку
print(x) # 4
print(first_list) # [3, 4, 5, 9, 2, 6, 5]
print()

# 2.1. Якщо не вказувати індекс, то за замовчуванням видаляється останній елемент списку
first_list = [3, 1, 4, 1, 5, 9, 2, 6, 5]
x = first_list.pop() # повертає значення 5 і видаляє його зі списку
print(x) # 5
print(first_list) # [3, 1, 4, 1, 5, 9, 2, 6]
print()

# 2.2. Буде помилка IndexError якщо у списку немає відповідного індексу
# x = lst.pop(10) # IndexError: pop index out of range

# Використовувати ключове слово del, яке приймає індекс або зріз елементів, які потрібно видалити, і не повертає їх значень
lst = [3, 1, 4, 1, 5, 9, 2, 6, 5]
del lst[2] # видаляє елемент з індексом 2 зі списку
print(lst) # [3, 1, 1, 5, 9, 2, 6, 5]
print()

# Перевірка на входження елемента до списку
# Щоб перевірити, чи входить елемент до списку в Пайтон, ви можете використовувати ключове слово in, яке повертає логічне значення True або False в залежності від того, чи знайдено елемент у списку
if 2 in lst:
	print("2 входить до списку lst")
else:
	print("2 не входить до списку lst")

print()

# Як дізнатися розмір списку?
# Щоб дізнатися розмір списку в Пайтон, ви можете використовувати вбудовану функцію len(), яка приймає список як аргумент і повертає його довжину як ціле число. Наприклад, якщо ви маєте список lst = [1, 2, 3, 4, 5], то ви можете отримати його розмір так:
lst = [53, 1, 4, 1, 5, 9, 2, 6, ]
size = len(lst) # size буде рівне 9
print(size) # виведе 9 на екран